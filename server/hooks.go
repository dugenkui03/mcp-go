// Code generated by `go generate`. DO NOT EDIT.
// source: server/internal/gen/hooks.go.tmpl
package server

import (
	"context"

	"github.com/mark3labs/mcp-go/mcp"
)

type Hook interface {
	//OnRegisterSession is a hook that will be called when a new session is registered.
	OnRegisterSession(ctx context.Context, session ClientSession)
	// OnBeforeAny is a function that is called after the request is
	// parsed but before the method is called.
	OnBeforeAny(ctx context.Context, id any, method mcp.MCPMethod, message any)
	// OnSuccess is a hook that will be called after the request
	// successfully generates a result, but before the result is sent to the client.
	OnSuccess(ctx context.Context, id any, method mcp.MCPMethod, message any, result any)
	// OnError is a hook that will be called when an error occurs,
	// either during the request parsing or the method execution.
	//
	// Example usage:
	// ```
	//
	//	hooks.AddOnError(func(ctx context.Context, id any, method mcp.MCPMethod, message any, err error) {
	//	  // Check for specific error types using errors.Is
	//	  if errors.Is(err, ErrUnsupported) {
	//	    // Handle capability not supported errors
	//	    log.Printf("Capability not supported: %v", err)
	//	  }
	//
	//	  // Use errors.As to get specific error types
	//	  var parseErr = &UnparseableMessageError{}
	//	  if errors.As(err, &parseErr) {
	//	    // Access specific methods/fields of the error type
	//	    log.Printf("Failed to parse message for method %s: %v",
	//	               parseErr.GetMethod(), parseErr.Unwrap())
	//	    // Access the raw message that failed to parse
	//	    rawMsg := parseErr.GetMessage()
	//	  }
	//
	//	  // Check for specific resource/prompt/tool errors
	//	  switch {
	//	  case errors.Is(err, ErrResourceNotFound):
	//	    log.Printf("Resource not found: %v", err)
	//	  case errors.Is(err, ErrPromptNotFound):
	//	    log.Printf("Prompt not found: %v", err)
	//	  case errors.Is(err, ErrToolNotFound):
	//	    log.Printf("Tool not found: %v", err)
	//	  }
	//	})
	OnError(ctx context.Context, id any, method mcp.MCPMethod, message any, err error)
	OnBeforeInitialize(ctx context.Context, id any, message *mcp.InitializeRequest)
	OnAfterInitialize(ctx context.Context, id any, message *mcp.InitializeRequest, result *mcp.InitializeResult)
	OnBeforePing(ctx context.Context, id any, message *mcp.PingRequest)
	OnAfterPing(ctx context.Context, id any, message *mcp.PingRequest, result *mcp.EmptyResult)
	OnBeforeListResources(ctx context.Context, id any, message *mcp.ListResourcesRequest)
	OnAfterListResources(ctx context.Context, id any, message *mcp.ListResourcesRequest, result *mcp.ListResourcesResult)
	OnBeforeListResourceTemplates(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest)
	OnAfterListResourceTemplates(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest, result *mcp.ListResourceTemplatesResult)
	OnBeforeReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest)
	OnAfterReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest, result *mcp.ReadResourceResult)
	OnBeforeListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest)
	OnAfterListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest, result *mcp.ListPromptsResult)
	OnBeforeGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest)
	OnAfterGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest, result *mcp.GetPromptResult)
	OnBeforeListTools(ctx context.Context, id any, message *mcp.ListToolsRequest)
	OnAfterListTools(ctx context.Context, id any, message *mcp.ListToolsRequest, result *mcp.ListToolsResult)
	OnBeforeCallTool(ctx context.Context, id any, message *mcp.CallToolRequest)
	OnAfterCallTool(ctx context.Context, id any, message *mcp.CallToolRequest, result *mcp.CallToolResult)
}

type Hooks struct {
	Hooks []Hook
}

func (h *Hooks) Add(hook Hook) {
	h.Hooks = append(h.Hooks, hook)
}

func (h *Hooks) OnRegisterSession(ctx context.Context, session ClientSession) {
	for _, hook := range h.Hooks {
		hook.OnRegisterSession(ctx, session)
	}
}

func (h *Hooks) OnBeforeAny(ctx context.Context, id any, method mcp.MCPMethod, message any) {
	for _, hook := range h.Hooks {
		hook.OnBeforeAny(ctx, id, method, message)
	}
}

func (h *Hooks) OnSuccess(ctx context.Context, id any, method mcp.MCPMethod, message any, result any) {
	for _, hook := range h.Hooks {
		hook.OnSuccess(ctx, id, method, message, result)
	}
}

func (h *Hooks) OnError(ctx context.Context, id any, method mcp.MCPMethod, message any, err error) {
	for _, hook := range h.Hooks {
		hook.OnError(ctx, id, method, message, err)
	}
}

func (h *Hooks) OnBeforeInitialize(ctx context.Context, id any, message *mcp.InitializeRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeInitialize(ctx, id, message)
	}
}

func (h *Hooks) OnAfterInitialize(ctx context.Context, id any, message *mcp.InitializeRequest, result *mcp.InitializeResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterInitialize(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforePing(ctx context.Context, id any, message *mcp.PingRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforePing(ctx, id, message)
	}
}

func (h *Hooks) OnAfterPing(ctx context.Context, id any, message *mcp.PingRequest, result *mcp.EmptyResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterPing(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeListResources(ctx context.Context, id any, message *mcp.ListResourcesRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeListResources(ctx, id, message)
	}
}

func (h *Hooks) OnAfterListResources(ctx context.Context, id any, message *mcp.ListResourcesRequest, result *mcp.ListResourcesResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterListResources(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeListResourceTemplates(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeListResourceTemplates(ctx, id, message)
	}
}

func (h *Hooks) OnAfterListResourceTemplates(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest, result *mcp.ListResourceTemplatesResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterListResourceTemplates(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeReadResource(ctx, id, message)
	}
}

func (h *Hooks) OnAfterReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest, result *mcp.ReadResourceResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterReadResource(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeListPrompts(ctx, id, message)
	}
}

func (h *Hooks) OnAfterListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest, result *mcp.ListPromptsResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterListPrompts(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeGetPrompt(ctx, id, message)
	}
}

func (h *Hooks) OnAfterGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest, result *mcp.GetPromptResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterGetPrompt(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeListTools(ctx context.Context, id any, message *mcp.ListToolsRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeListTools(ctx, id, message)
	}
}

func (h *Hooks) OnAfterListTools(ctx context.Context, id any, message *mcp.ListToolsRequest, result *mcp.ListToolsResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterListTools(ctx, id, message, result)
	}
}

func (h *Hooks) OnBeforeCallTool(ctx context.Context, id any, message *mcp.CallToolRequest) {
	for _, hook := range h.Hooks {
		hook.OnBeforeCallTool(ctx, id, message)
	}
}

func (h *Hooks) OnAfterCallTool(ctx context.Context, id any, message *mcp.CallToolRequest, result *mcp.CallToolResult) {
	for _, hook := range h.Hooks {
		hook.OnAfterCallTool(ctx, id, message, result)
	}
}